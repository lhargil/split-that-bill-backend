// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SplitThatBill.Backend.Data;

namespace SplitThatBill.Backend.Data.Migrations
{
    [DbContext(typeof(SplitThatBillContext))]
    [Migration("20200127233607_AddExternalIdToBill")]
    partial class AddExternalIdToBill
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SplitThatBill.Backend.Core.Entities.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BillDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("BillTakerId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EstablishmentName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ExternalId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("BillTakerId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("SplitThatBill.Backend.Core.Entities.BillItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal?>("DiscountRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.ToTable("BillItem");
                });

            modelBuilder.Entity("SplitThatBill.Backend.Core.Entities.BillParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("PersonId");

                    b.ToTable("BillParticipant");
                });

            modelBuilder.Entity("SplitThatBill.Backend.Core.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Firstname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Lastname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("SplitThatBill.Backend.Core.Entities.PersonBillItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BillItemId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("PayableUnitPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("BillItemId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonBillItem");
                });

            modelBuilder.Entity("SplitThatBill.Backend.Core.Entities.Bill", b =>
                {
                    b.HasOne("SplitThatBill.Backend.Core.Entities.Person", "BillTaker")
                        .WithMany("BillsTaken")
                        .HasForeignKey("BillTakerId");

                    b.OwnsMany("SplitThatBill.Backend.Core.OwnedEntities.ExtraCharge", "ExtraCharges", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<int>("BillId")
                                .HasColumnType("int");

                            b1.Property<string>("Description")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<decimal>("Rate")
                                .HasColumnType("decimal(65,30)");

                            b1.HasKey("Id");

                            b1.HasIndex("BillId");

                            b1.ToTable("ExtraCharge");

                            b1.WithOwner()
                                .HasForeignKey("BillId");
                        });
                });

            modelBuilder.Entity("SplitThatBill.Backend.Core.Entities.BillItem", b =>
                {
                    b.HasOne("SplitThatBill.Backend.Core.Entities.Bill", "Bill")
                        .WithMany("BillItems")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SplitThatBill.Backend.Core.Entities.BillParticipant", b =>
                {
                    b.HasOne("SplitThatBill.Backend.Core.Entities.Bill", "Bill")
                        .WithMany("Participants")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SplitThatBill.Backend.Core.Entities.Person", "Person")
                        .WithMany("Bills")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SplitThatBill.Backend.Core.Entities.Person", b =>
                {
                    b.OwnsMany("SplitThatBill.Backend.Core.OwnedEntities.PaymentDetail", "PaymentDetails", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("AccountName")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("AccountNumber")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<string>("BankName")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.Property<int>("PersonId")
                                .HasColumnType("int");

                            b1.Property<int?>("PersonId1")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("PersonId");

                            b1.HasIndex("PersonId1");

                            b1.ToTable("PaymentDetail");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");

                            b1.HasOne("SplitThatBill.Backend.Core.Entities.Person", "Person")
                                .WithMany()
                                .HasForeignKey("PersonId1");
                        });
                });

            modelBuilder.Entity("SplitThatBill.Backend.Core.Entities.PersonBillItem", b =>
                {
                    b.HasOne("SplitThatBill.Backend.Core.Entities.BillItem", "BillItem")
                        .WithMany("PersonBillItems")
                        .HasForeignKey("BillItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SplitThatBill.Backend.Core.Entities.Person", "Person")
                        .WithMany("PersonBillItems")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
